// source: pando/api/alarm/v0/interactiveprovider.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var pando_api_extensions_pb = require('../../../../pando/api/extensions_pb.js');
goog.object.extend(proto, pando_api_extensions_pb);
var pando_api_shared_pb = require('../../../../pando/api/shared_pb.js');
goog.object.extend(proto, pando_api_shared_pb);
goog.exportSymbol('proto.interactive_provider.Configuration', null, global);
goog.exportSymbol('proto.interactive_provider.ConfigurationList', null, global);
goog.exportSymbol('proto.interactive_provider.GetConfigurationListRequest', null, global);
goog.exportSymbol('proto.interactive_provider.GetConfigurationRequest', null, global);
goog.exportSymbol('proto.interactive_provider.GetTypeRequest', null, global);
goog.exportSymbol('proto.interactive_provider.Setting', null, global);
goog.exportSymbol('proto.interactive_provider.SettingList', null, global);
goog.exportSymbol('proto.interactive_provider.SettingValue', null, global);
goog.exportSymbol('proto.interactive_provider.Type', null, global);
goog.exportSymbol('proto.interactive_provider.TypeList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interactive_provider.GetTypeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interactive_provider.GetTypeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interactive_provider.GetTypeRequest.displayName = 'proto.interactive_provider.GetTypeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interactive_provider.GetConfigurationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interactive_provider.GetConfigurationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interactive_provider.GetConfigurationRequest.displayName = 'proto.interactive_provider.GetConfigurationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interactive_provider.GetConfigurationListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.interactive_provider.GetConfigurationListRequest.repeatedFields_, null);
};
goog.inherits(proto.interactive_provider.GetConfigurationListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interactive_provider.GetConfigurationListRequest.displayName = 'proto.interactive_provider.GetConfigurationListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interactive_provider.Type = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interactive_provider.Type, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interactive_provider.Type.displayName = 'proto.interactive_provider.Type';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interactive_provider.TypeList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.interactive_provider.TypeList.repeatedFields_, null);
};
goog.inherits(proto.interactive_provider.TypeList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interactive_provider.TypeList.displayName = 'proto.interactive_provider.TypeList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interactive_provider.Setting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interactive_provider.Setting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interactive_provider.Setting.displayName = 'proto.interactive_provider.Setting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interactive_provider.SettingValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interactive_provider.SettingValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interactive_provider.SettingValue.displayName = 'proto.interactive_provider.SettingValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interactive_provider.Configuration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.interactive_provider.Configuration.repeatedFields_, null);
};
goog.inherits(proto.interactive_provider.Configuration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interactive_provider.Configuration.displayName = 'proto.interactive_provider.Configuration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interactive_provider.ConfigurationList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.interactive_provider.ConfigurationList.repeatedFields_, null);
};
goog.inherits(proto.interactive_provider.ConfigurationList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interactive_provider.ConfigurationList.displayName = 'proto.interactive_provider.ConfigurationList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interactive_provider.SettingList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.interactive_provider.SettingList.repeatedFields_, null);
};
goog.inherits(proto.interactive_provider.SettingList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.interactive_provider.SettingList.displayName = 'proto.interactive_provider.SettingList';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interactive_provider.GetTypeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.interactive_provider.GetTypeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interactive_provider.GetTypeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interactive_provider.GetTypeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    interactiveProviderCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    includeInactive: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interactive_provider.GetTypeRequest}
 */
proto.interactive_provider.GetTypeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interactive_provider.GetTypeRequest;
  return proto.interactive_provider.GetTypeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interactive_provider.GetTypeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interactive_provider.GetTypeRequest}
 */
proto.interactive_provider.GetTypeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInteractiveProviderCode(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeInactive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interactive_provider.GetTypeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interactive_provider.GetTypeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interactive_provider.GetTypeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interactive_provider.GetTypeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInteractiveProviderCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIncludeInactive();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string interactive_provider_code = 1;
 * @return {string}
 */
proto.interactive_provider.GetTypeRequest.prototype.getInteractiveProviderCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.interactive_provider.GetTypeRequest} returns this
 */
proto.interactive_provider.GetTypeRequest.prototype.setInteractiveProviderCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool include_inactive = 2;
 * @return {boolean}
 */
proto.interactive_provider.GetTypeRequest.prototype.getIncludeInactive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.interactive_provider.GetTypeRequest} returns this
 */
proto.interactive_provider.GetTypeRequest.prototype.setIncludeInactive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interactive_provider.GetConfigurationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.interactive_provider.GetConfigurationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interactive_provider.GetConfigurationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interactive_provider.GetConfigurationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientInteractiveProviderGuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    includeInactive: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interactive_provider.GetConfigurationRequest}
 */
proto.interactive_provider.GetConfigurationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interactive_provider.GetConfigurationRequest;
  return proto.interactive_provider.GetConfigurationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interactive_provider.GetConfigurationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interactive_provider.GetConfigurationRequest}
 */
proto.interactive_provider.GetConfigurationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientInteractiveProviderGuid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeInactive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interactive_provider.GetConfigurationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interactive_provider.GetConfigurationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interactive_provider.GetConfigurationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interactive_provider.GetConfigurationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientInteractiveProviderGuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIncludeInactive();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string client_interactive_provider_guid = 1;
 * @return {string}
 */
proto.interactive_provider.GetConfigurationRequest.prototype.getClientInteractiveProviderGuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.interactive_provider.GetConfigurationRequest} returns this
 */
proto.interactive_provider.GetConfigurationRequest.prototype.setClientInteractiveProviderGuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool include_inactive = 2;
 * @return {boolean}
 */
proto.interactive_provider.GetConfigurationRequest.prototype.getIncludeInactive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.interactive_provider.GetConfigurationRequest} returns this
 */
proto.interactive_provider.GetConfigurationRequest.prototype.setIncludeInactive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.interactive_provider.GetConfigurationListRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interactive_provider.GetConfigurationListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.interactive_provider.GetConfigurationListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interactive_provider.GetConfigurationListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interactive_provider.GetConfigurationListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientInteractiveProviderGuidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    includeInactive: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interactive_provider.GetConfigurationListRequest}
 */
proto.interactive_provider.GetConfigurationListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interactive_provider.GetConfigurationListRequest;
  return proto.interactive_provider.GetConfigurationListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interactive_provider.GetConfigurationListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interactive_provider.GetConfigurationListRequest}
 */
proto.interactive_provider.GetConfigurationListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addClientInteractiveProviderGuids(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeInactive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interactive_provider.GetConfigurationListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interactive_provider.GetConfigurationListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interactive_provider.GetConfigurationListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interactive_provider.GetConfigurationListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientInteractiveProviderGuidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getIncludeInactive();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated string client_interactive_provider_guids = 1;
 * @return {!Array<string>}
 */
proto.interactive_provider.GetConfigurationListRequest.prototype.getClientInteractiveProviderGuidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.interactive_provider.GetConfigurationListRequest} returns this
 */
proto.interactive_provider.GetConfigurationListRequest.prototype.setClientInteractiveProviderGuidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.interactive_provider.GetConfigurationListRequest} returns this
 */
proto.interactive_provider.GetConfigurationListRequest.prototype.addClientInteractiveProviderGuids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interactive_provider.GetConfigurationListRequest} returns this
 */
proto.interactive_provider.GetConfigurationListRequest.prototype.clearClientInteractiveProviderGuidsList = function() {
  return this.setClientInteractiveProviderGuidsList([]);
};


/**
 * optional bool include_inactive = 2;
 * @return {boolean}
 */
proto.interactive_provider.GetConfigurationListRequest.prototype.getIncludeInactive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.interactive_provider.GetConfigurationListRequest} returns this
 */
proto.interactive_provider.GetConfigurationListRequest.prototype.setIncludeInactive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interactive_provider.Type.prototype.toObject = function(opt_includeInstance) {
  return proto.interactive_provider.Type.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interactive_provider.Type} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interactive_provider.Type.toObject = function(includeInstance, msg) {
  var f, obj = {
    interactiveProviderCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    credentialPrefix: jspb.Message.getFieldWithDefault(msg, 6, ""),
    displayName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isActive: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    dateCreated: jspb.Message.getFieldWithDefault(msg, 4, ""),
    dateLastUpdated: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interactive_provider.Type}
 */
proto.interactive_provider.Type.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interactive_provider.Type;
  return proto.interactive_provider.Type.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interactive_provider.Type} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interactive_provider.Type}
 */
proto.interactive_provider.Type.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInteractiveProviderCode(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCredentialPrefix(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateCreated(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateLastUpdated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interactive_provider.Type.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interactive_provider.Type.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interactive_provider.Type} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interactive_provider.Type.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInteractiveProviderCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCredentialPrefix();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsActive();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getDateCreated();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDateLastUpdated();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string interactive_provider_code = 1;
 * @return {string}
 */
proto.interactive_provider.Type.prototype.getInteractiveProviderCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.interactive_provider.Type} returns this
 */
proto.interactive_provider.Type.prototype.setInteractiveProviderCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string credential_prefix = 6;
 * @return {string}
 */
proto.interactive_provider.Type.prototype.getCredentialPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.interactive_provider.Type} returns this
 */
proto.interactive_provider.Type.prototype.setCredentialPrefix = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string display_name = 2;
 * @return {string}
 */
proto.interactive_provider.Type.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.interactive_provider.Type} returns this
 */
proto.interactive_provider.Type.prototype.setDisplayName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool is_active = 3;
 * @return {boolean}
 */
proto.interactive_provider.Type.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.interactive_provider.Type} returns this
 */
proto.interactive_provider.Type.prototype.setIsActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string date_created = 4;
 * @return {string}
 */
proto.interactive_provider.Type.prototype.getDateCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.interactive_provider.Type} returns this
 */
proto.interactive_provider.Type.prototype.setDateCreated = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string date_last_updated = 5;
 * @return {string}
 */
proto.interactive_provider.Type.prototype.getDateLastUpdated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.interactive_provider.Type} returns this
 */
proto.interactive_provider.Type.prototype.setDateLastUpdated = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.interactive_provider.TypeList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interactive_provider.TypeList.prototype.toObject = function(opt_includeInstance) {
  return proto.interactive_provider.TypeList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interactive_provider.TypeList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interactive_provider.TypeList.toObject = function(includeInstance, msg) {
  var f, obj = {
    typesList: jspb.Message.toObjectList(msg.getTypesList(),
    proto.interactive_provider.Type.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interactive_provider.TypeList}
 */
proto.interactive_provider.TypeList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interactive_provider.TypeList;
  return proto.interactive_provider.TypeList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interactive_provider.TypeList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interactive_provider.TypeList}
 */
proto.interactive_provider.TypeList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.interactive_provider.Type;
      reader.readMessage(value,proto.interactive_provider.Type.deserializeBinaryFromReader);
      msg.addTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interactive_provider.TypeList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interactive_provider.TypeList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interactive_provider.TypeList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interactive_provider.TypeList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.interactive_provider.Type.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Type types = 1;
 * @return {!Array<!proto.interactive_provider.Type>}
 */
proto.interactive_provider.TypeList.prototype.getTypesList = function() {
  return /** @type{!Array<!proto.interactive_provider.Type>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.interactive_provider.Type, 1));
};


/**
 * @param {!Array<!proto.interactive_provider.Type>} value
 * @return {!proto.interactive_provider.TypeList} returns this
*/
proto.interactive_provider.TypeList.prototype.setTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.interactive_provider.Type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.interactive_provider.Type}
 */
proto.interactive_provider.TypeList.prototype.addTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.interactive_provider.Type, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interactive_provider.TypeList} returns this
 */
proto.interactive_provider.TypeList.prototype.clearTypesList = function() {
  return this.setTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interactive_provider.Setting.prototype.toObject = function(opt_includeInstance) {
  return proto.interactive_provider.Setting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interactive_provider.Setting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interactive_provider.Setting.toObject = function(includeInstance, msg) {
  var f, obj = {
    interactiveProviderCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    settingCode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    dataType: jspb.Message.getFieldWithDefault(msg, 4, ""),
    dateCreated: jspb.Message.getFieldWithDefault(msg, 5, ""),
    dateLastUpdated: jspb.Message.getFieldWithDefault(msg, 6, ""),
    defaultValue: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interactive_provider.Setting}
 */
proto.interactive_provider.Setting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interactive_provider.Setting;
  return proto.interactive_provider.Setting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interactive_provider.Setting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interactive_provider.Setting}
 */
proto.interactive_provider.Setting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInteractiveProviderCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSettingCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateCreated(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateLastUpdated(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interactive_provider.Setting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interactive_provider.Setting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interactive_provider.Setting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interactive_provider.Setting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInteractiveProviderCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSettingCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDataType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDateCreated();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDateLastUpdated();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDefaultValue();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string interactive_provider_code = 1;
 * @return {string}
 */
proto.interactive_provider.Setting.prototype.getInteractiveProviderCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.interactive_provider.Setting} returns this
 */
proto.interactive_provider.Setting.prototype.setInteractiveProviderCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string setting_code = 2;
 * @return {string}
 */
proto.interactive_provider.Setting.prototype.getSettingCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.interactive_provider.Setting} returns this
 */
proto.interactive_provider.Setting.prototype.setSettingCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.interactive_provider.Setting.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.interactive_provider.Setting} returns this
 */
proto.interactive_provider.Setting.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string data_type = 4;
 * @return {string}
 */
proto.interactive_provider.Setting.prototype.getDataType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.interactive_provider.Setting} returns this
 */
proto.interactive_provider.Setting.prototype.setDataType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string date_created = 5;
 * @return {string}
 */
proto.interactive_provider.Setting.prototype.getDateCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.interactive_provider.Setting} returns this
 */
proto.interactive_provider.Setting.prototype.setDateCreated = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string date_last_updated = 6;
 * @return {string}
 */
proto.interactive_provider.Setting.prototype.getDateLastUpdated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.interactive_provider.Setting} returns this
 */
proto.interactive_provider.Setting.prototype.setDateLastUpdated = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string default_value = 7;
 * @return {string}
 */
proto.interactive_provider.Setting.prototype.getDefaultValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.interactive_provider.Setting} returns this
 */
proto.interactive_provider.Setting.prototype.setDefaultValue = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interactive_provider.SettingValue.prototype.toObject = function(opt_includeInstance) {
  return proto.interactive_provider.SettingValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interactive_provider.SettingValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interactive_provider.SettingValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientInteractiveProviderGuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    settingCode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dataType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    settingValue: jspb.Message.getFieldWithDefault(msg, 4, ""),
    dateLastUpdated: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interactive_provider.SettingValue}
 */
proto.interactive_provider.SettingValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interactive_provider.SettingValue;
  return proto.interactive_provider.SettingValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interactive_provider.SettingValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interactive_provider.SettingValue}
 */
proto.interactive_provider.SettingValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientInteractiveProviderGuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSettingCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSettingValue(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateLastUpdated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interactive_provider.SettingValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interactive_provider.SettingValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interactive_provider.SettingValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interactive_provider.SettingValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientInteractiveProviderGuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSettingCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDataType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSettingValue();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDateLastUpdated();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string client_interactive_provider_guid = 1;
 * @return {string}
 */
proto.interactive_provider.SettingValue.prototype.getClientInteractiveProviderGuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.interactive_provider.SettingValue} returns this
 */
proto.interactive_provider.SettingValue.prototype.setClientInteractiveProviderGuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string setting_code = 2;
 * @return {string}
 */
proto.interactive_provider.SettingValue.prototype.getSettingCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.interactive_provider.SettingValue} returns this
 */
proto.interactive_provider.SettingValue.prototype.setSettingCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string data_type = 3;
 * @return {string}
 */
proto.interactive_provider.SettingValue.prototype.getDataType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.interactive_provider.SettingValue} returns this
 */
proto.interactive_provider.SettingValue.prototype.setDataType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string setting_value = 4;
 * @return {string}
 */
proto.interactive_provider.SettingValue.prototype.getSettingValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.interactive_provider.SettingValue} returns this
 */
proto.interactive_provider.SettingValue.prototype.setSettingValue = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string date_last_updated = 5;
 * @return {string}
 */
proto.interactive_provider.SettingValue.prototype.getDateLastUpdated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.interactive_provider.SettingValue} returns this
 */
proto.interactive_provider.SettingValue.prototype.setDateLastUpdated = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.interactive_provider.Configuration.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interactive_provider.Configuration.prototype.toObject = function(opt_includeInstance) {
  return proto.interactive_provider.Configuration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interactive_provider.Configuration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interactive_provider.Configuration.toObject = function(includeInstance, msg) {
  var f, obj = {
    interactiveProviderCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientInteractiveProviderGuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    isActive: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    settingValuesList: jspb.Message.toObjectList(msg.getSettingValuesList(),
    proto.interactive_provider.SettingValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interactive_provider.Configuration}
 */
proto.interactive_provider.Configuration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interactive_provider.Configuration;
  return proto.interactive_provider.Configuration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interactive_provider.Configuration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interactive_provider.Configuration}
 */
proto.interactive_provider.Configuration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInteractiveProviderCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientInteractiveProviderGuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    case 5:
      var value = new proto.interactive_provider.SettingValue;
      reader.readMessage(value,proto.interactive_provider.SettingValue.deserializeBinaryFromReader);
      msg.addSettingValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interactive_provider.Configuration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interactive_provider.Configuration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interactive_provider.Configuration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interactive_provider.Configuration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInteractiveProviderCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientInteractiveProviderGuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIsActive();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getSettingValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.interactive_provider.SettingValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string interactive_provider_code = 1;
 * @return {string}
 */
proto.interactive_provider.Configuration.prototype.getInteractiveProviderCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.interactive_provider.Configuration} returns this
 */
proto.interactive_provider.Configuration.prototype.setInteractiveProviderCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string client_interactive_provider_guid = 2;
 * @return {string}
 */
proto.interactive_provider.Configuration.prototype.getClientInteractiveProviderGuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.interactive_provider.Configuration} returns this
 */
proto.interactive_provider.Configuration.prototype.setClientInteractiveProviderGuid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.interactive_provider.Configuration.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.interactive_provider.Configuration} returns this
 */
proto.interactive_provider.Configuration.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool is_active = 4;
 * @return {boolean}
 */
proto.interactive_provider.Configuration.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.interactive_provider.Configuration} returns this
 */
proto.interactive_provider.Configuration.prototype.setIsActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * repeated SettingValue setting_values = 5;
 * @return {!Array<!proto.interactive_provider.SettingValue>}
 */
proto.interactive_provider.Configuration.prototype.getSettingValuesList = function() {
  return /** @type{!Array<!proto.interactive_provider.SettingValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.interactive_provider.SettingValue, 5));
};


/**
 * @param {!Array<!proto.interactive_provider.SettingValue>} value
 * @return {!proto.interactive_provider.Configuration} returns this
*/
proto.interactive_provider.Configuration.prototype.setSettingValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.interactive_provider.SettingValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.interactive_provider.SettingValue}
 */
proto.interactive_provider.Configuration.prototype.addSettingValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.interactive_provider.SettingValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interactive_provider.Configuration} returns this
 */
proto.interactive_provider.Configuration.prototype.clearSettingValuesList = function() {
  return this.setSettingValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.interactive_provider.ConfigurationList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interactive_provider.ConfigurationList.prototype.toObject = function(opt_includeInstance) {
  return proto.interactive_provider.ConfigurationList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interactive_provider.ConfigurationList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interactive_provider.ConfigurationList.toObject = function(includeInstance, msg) {
  var f, obj = {
    configurationsList: jspb.Message.toObjectList(msg.getConfigurationsList(),
    proto.interactive_provider.Configuration.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interactive_provider.ConfigurationList}
 */
proto.interactive_provider.ConfigurationList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interactive_provider.ConfigurationList;
  return proto.interactive_provider.ConfigurationList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interactive_provider.ConfigurationList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interactive_provider.ConfigurationList}
 */
proto.interactive_provider.ConfigurationList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.interactive_provider.Configuration;
      reader.readMessage(value,proto.interactive_provider.Configuration.deserializeBinaryFromReader);
      msg.addConfigurations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interactive_provider.ConfigurationList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interactive_provider.ConfigurationList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interactive_provider.ConfigurationList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interactive_provider.ConfigurationList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigurationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.interactive_provider.Configuration.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Configuration configurations = 1;
 * @return {!Array<!proto.interactive_provider.Configuration>}
 */
proto.interactive_provider.ConfigurationList.prototype.getConfigurationsList = function() {
  return /** @type{!Array<!proto.interactive_provider.Configuration>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.interactive_provider.Configuration, 1));
};


/**
 * @param {!Array<!proto.interactive_provider.Configuration>} value
 * @return {!proto.interactive_provider.ConfigurationList} returns this
*/
proto.interactive_provider.ConfigurationList.prototype.setConfigurationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.interactive_provider.Configuration=} opt_value
 * @param {number=} opt_index
 * @return {!proto.interactive_provider.Configuration}
 */
proto.interactive_provider.ConfigurationList.prototype.addConfigurations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.interactive_provider.Configuration, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interactive_provider.ConfigurationList} returns this
 */
proto.interactive_provider.ConfigurationList.prototype.clearConfigurationsList = function() {
  return this.setConfigurationsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.interactive_provider.SettingList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.interactive_provider.SettingList.prototype.toObject = function(opt_includeInstance) {
  return proto.interactive_provider.SettingList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interactive_provider.SettingList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interactive_provider.SettingList.toObject = function(includeInstance, msg) {
  var f, obj = {
    interactiveProviderCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    settingsList: jspb.Message.toObjectList(msg.getSettingsList(),
    proto.interactive_provider.Setting.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interactive_provider.SettingList}
 */
proto.interactive_provider.SettingList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interactive_provider.SettingList;
  return proto.interactive_provider.SettingList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interactive_provider.SettingList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interactive_provider.SettingList}
 */
proto.interactive_provider.SettingList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInteractiveProviderCode(value);
      break;
    case 2:
      var value = new proto.interactive_provider.Setting;
      reader.readMessage(value,proto.interactive_provider.Setting.deserializeBinaryFromReader);
      msg.addSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interactive_provider.SettingList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.interactive_provider.SettingList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interactive_provider.SettingList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interactive_provider.SettingList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInteractiveProviderCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSettingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.interactive_provider.Setting.serializeBinaryToWriter
    );
  }
};


/**
 * optional string interactive_provider_code = 1;
 * @return {string}
 */
proto.interactive_provider.SettingList.prototype.getInteractiveProviderCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.interactive_provider.SettingList} returns this
 */
proto.interactive_provider.SettingList.prototype.setInteractiveProviderCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Setting settings = 2;
 * @return {!Array<!proto.interactive_provider.Setting>}
 */
proto.interactive_provider.SettingList.prototype.getSettingsList = function() {
  return /** @type{!Array<!proto.interactive_provider.Setting>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.interactive_provider.Setting, 2));
};


/**
 * @param {!Array<!proto.interactive_provider.Setting>} value
 * @return {!proto.interactive_provider.SettingList} returns this
*/
proto.interactive_provider.SettingList.prototype.setSettingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.interactive_provider.Setting=} opt_value
 * @param {number=} opt_index
 * @return {!proto.interactive_provider.Setting}
 */
proto.interactive_provider.SettingList.prototype.addSettings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.interactive_provider.Setting, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.interactive_provider.SettingList} returns this
 */
proto.interactive_provider.SettingList.prototype.clearSettingsList = function() {
  return this.setSettingsList([]);
};


goog.object.extend(exports, proto.interactive_provider);
