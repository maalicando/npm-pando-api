// source: pando/api/alarm/v0/signal-model.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.signal.EquipmentType', null, global);
goog.exportSymbol('proto.signal.EquipmentTypeList', null, global);
goog.exportSymbol('proto.signal.Type', null, global);
goog.exportSymbol('proto.signal.TypeList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signal.Type = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.signal.Type, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.signal.Type.displayName = 'proto.signal.Type';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signal.TypeList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.signal.TypeList.repeatedFields_, null);
};
goog.inherits(proto.signal.TypeList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.signal.TypeList.displayName = 'proto.signal.TypeList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signal.EquipmentType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.signal.EquipmentType.repeatedFields_, null);
};
goog.inherits(proto.signal.EquipmentType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.signal.EquipmentType.displayName = 'proto.signal.EquipmentType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signal.EquipmentTypeList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.signal.EquipmentTypeList.repeatedFields_, null);
};
goog.inherits(proto.signal.EquipmentTypeList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.signal.EquipmentTypeList.displayName = 'proto.signal.EquipmentTypeList';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signal.Type.prototype.toObject = function(opt_includeInstance) {
  return proto.signal.Type.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signal.Type} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signal.Type.toObject = function(includeInstance, msg) {
  var f, obj = {
    signalTypeGuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    signalTypeName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    signalTypeDescription: jspb.Message.getFieldWithDefault(msg, 3, ""),
    isActive: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signal.Type}
 */
proto.signal.Type.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signal.Type;
  return proto.signal.Type.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signal.Type} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signal.Type}
 */
proto.signal.Type.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignalTypeGuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignalTypeName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignalTypeDescription(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signal.Type.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signal.Type.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signal.Type} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signal.Type.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignalTypeGuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSignalTypeName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSignalTypeDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIsActive();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string signal_type_guid = 1;
 * @return {string}
 */
proto.signal.Type.prototype.getSignalTypeGuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.signal.Type} returns this
 */
proto.signal.Type.prototype.setSignalTypeGuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string signal_type_name = 2;
 * @return {string}
 */
proto.signal.Type.prototype.getSignalTypeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.signal.Type} returns this
 */
proto.signal.Type.prototype.setSignalTypeName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string signal_type_description = 3;
 * @return {string}
 */
proto.signal.Type.prototype.getSignalTypeDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.signal.Type} returns this
 */
proto.signal.Type.prototype.setSignalTypeDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool is_active = 4;
 * @return {boolean}
 */
proto.signal.Type.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.signal.Type} returns this
 */
proto.signal.Type.prototype.setIsActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.signal.TypeList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signal.TypeList.prototype.toObject = function(opt_includeInstance) {
  return proto.signal.TypeList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signal.TypeList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signal.TypeList.toObject = function(includeInstance, msg) {
  var f, obj = {
    typesList: jspb.Message.toObjectList(msg.getTypesList(),
    proto.signal.Type.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signal.TypeList}
 */
proto.signal.TypeList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signal.TypeList;
  return proto.signal.TypeList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signal.TypeList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signal.TypeList}
 */
proto.signal.TypeList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.signal.Type;
      reader.readMessage(value,proto.signal.Type.deserializeBinaryFromReader);
      msg.addTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signal.TypeList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signal.TypeList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signal.TypeList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signal.TypeList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.signal.Type.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Type types = 1;
 * @return {!Array<!proto.signal.Type>}
 */
proto.signal.TypeList.prototype.getTypesList = function() {
  return /** @type{!Array<!proto.signal.Type>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.signal.Type, 1));
};


/**
 * @param {!Array<!proto.signal.Type>} value
 * @return {!proto.signal.TypeList} returns this
*/
proto.signal.TypeList.prototype.setTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.signal.Type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.signal.Type}
 */
proto.signal.TypeList.prototype.addTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.signal.Type, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.signal.TypeList} returns this
 */
proto.signal.TypeList.prototype.clearTypesList = function() {
  return this.setTypesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.signal.EquipmentType.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signal.EquipmentType.prototype.toObject = function(opt_includeInstance) {
  return proto.signal.EquipmentType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signal.EquipmentType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signal.EquipmentType.toObject = function(includeInstance, msg) {
  var f, obj = {
    signalTypeGuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    signalTypeName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    signalTypeDescription: jspb.Message.getFieldWithDefault(msg, 3, ""),
    isActive: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    equipmentGuidsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signal.EquipmentType}
 */
proto.signal.EquipmentType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signal.EquipmentType;
  return proto.signal.EquipmentType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signal.EquipmentType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signal.EquipmentType}
 */
proto.signal.EquipmentType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignalTypeGuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignalTypeName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignalTypeDescription(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addEquipmentGuids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signal.EquipmentType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signal.EquipmentType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signal.EquipmentType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signal.EquipmentType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignalTypeGuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSignalTypeName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSignalTypeDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIsActive();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getEquipmentGuidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional string signal_type_guid = 1;
 * @return {string}
 */
proto.signal.EquipmentType.prototype.getSignalTypeGuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.signal.EquipmentType} returns this
 */
proto.signal.EquipmentType.prototype.setSignalTypeGuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string signal_type_name = 2;
 * @return {string}
 */
proto.signal.EquipmentType.prototype.getSignalTypeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.signal.EquipmentType} returns this
 */
proto.signal.EquipmentType.prototype.setSignalTypeName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string signal_type_description = 3;
 * @return {string}
 */
proto.signal.EquipmentType.prototype.getSignalTypeDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.signal.EquipmentType} returns this
 */
proto.signal.EquipmentType.prototype.setSignalTypeDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool is_active = 4;
 * @return {boolean}
 */
proto.signal.EquipmentType.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.signal.EquipmentType} returns this
 */
proto.signal.EquipmentType.prototype.setIsActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * repeated string equipment_guids = 5;
 * @return {!Array<string>}
 */
proto.signal.EquipmentType.prototype.getEquipmentGuidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.signal.EquipmentType} returns this
 */
proto.signal.EquipmentType.prototype.setEquipmentGuidsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.signal.EquipmentType} returns this
 */
proto.signal.EquipmentType.prototype.addEquipmentGuids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.signal.EquipmentType} returns this
 */
proto.signal.EquipmentType.prototype.clearEquipmentGuidsList = function() {
  return this.setEquipmentGuidsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.signal.EquipmentTypeList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signal.EquipmentTypeList.prototype.toObject = function(opt_includeInstance) {
  return proto.signal.EquipmentTypeList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signal.EquipmentTypeList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signal.EquipmentTypeList.toObject = function(includeInstance, msg) {
  var f, obj = {
    signalTypeEquipmentList: jspb.Message.toObjectList(msg.getSignalTypeEquipmentList(),
    proto.signal.EquipmentType.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signal.EquipmentTypeList}
 */
proto.signal.EquipmentTypeList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signal.EquipmentTypeList;
  return proto.signal.EquipmentTypeList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signal.EquipmentTypeList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signal.EquipmentTypeList}
 */
proto.signal.EquipmentTypeList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.signal.EquipmentType;
      reader.readMessage(value,proto.signal.EquipmentType.deserializeBinaryFromReader);
      msg.addSignalTypeEquipment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signal.EquipmentTypeList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signal.EquipmentTypeList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signal.EquipmentTypeList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signal.EquipmentTypeList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignalTypeEquipmentList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.signal.EquipmentType.serializeBinaryToWriter
    );
  }
};


/**
 * repeated EquipmentType signal_type_equipment = 1;
 * @return {!Array<!proto.signal.EquipmentType>}
 */
proto.signal.EquipmentTypeList.prototype.getSignalTypeEquipmentList = function() {
  return /** @type{!Array<!proto.signal.EquipmentType>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.signal.EquipmentType, 1));
};


/**
 * @param {!Array<!proto.signal.EquipmentType>} value
 * @return {!proto.signal.EquipmentTypeList} returns this
*/
proto.signal.EquipmentTypeList.prototype.setSignalTypeEquipmentList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.signal.EquipmentType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.signal.EquipmentType}
 */
proto.signal.EquipmentTypeList.prototype.addSignalTypeEquipment = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.signal.EquipmentType, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.signal.EquipmentTypeList} returns this
 */
proto.signal.EquipmentTypeList.prototype.clearSignalTypeEquipmentList = function() {
  return this.setSignalTypeEquipmentList([]);
};


goog.object.extend(exports, proto.signal);
