// source: pando/api/alarm/v0/panel-model.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.panel.Configuration', null, global);
goog.exportSymbol('proto.panel.ConfigurationList', null, global);
goog.exportSymbol('proto.panel.PanelEquipment', null, global);
goog.exportSymbol('proto.panel.PanelEquipmentGroup', null, global);
goog.exportSymbol('proto.panel.PanelEquipmentGroupList', null, global);
goog.exportSymbol('proto.panel.PanelEquipmentList', null, global);
goog.exportSymbol('proto.panel.Type', null, global);
goog.exportSymbol('proto.panel.TypeList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.panel.Type = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.panel.Type, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.panel.Type.displayName = 'proto.panel.Type';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.panel.Configuration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.panel.Configuration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.panel.Configuration.displayName = 'proto.panel.Configuration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.panel.PanelEquipment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.panel.PanelEquipment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.panel.PanelEquipment.displayName = 'proto.panel.PanelEquipment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.panel.PanelEquipmentGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.panel.PanelEquipmentGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.panel.PanelEquipmentGroup.displayName = 'proto.panel.PanelEquipmentGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.panel.TypeList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.panel.TypeList.repeatedFields_, null);
};
goog.inherits(proto.panel.TypeList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.panel.TypeList.displayName = 'proto.panel.TypeList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.panel.ConfigurationList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.panel.ConfigurationList.repeatedFields_, null);
};
goog.inherits(proto.panel.ConfigurationList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.panel.ConfigurationList.displayName = 'proto.panel.ConfigurationList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.panel.PanelEquipmentList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.panel.PanelEquipmentList.repeatedFields_, null);
};
goog.inherits(proto.panel.PanelEquipmentList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.panel.PanelEquipmentList.displayName = 'proto.panel.PanelEquipmentList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.panel.PanelEquipmentGroupList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.panel.PanelEquipmentGroupList.repeatedFields_, null);
};
goog.inherits(proto.panel.PanelEquipmentGroupList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.panel.PanelEquipmentGroupList.displayName = 'proto.panel.PanelEquipmentGroupList';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.panel.Type.prototype.toObject = function(opt_includeInstance) {
  return proto.panel.Type.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.panel.Type} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.panel.Type.toObject = function(includeInstance, msg) {
  var f, obj = {
    panelCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    displayName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    manufacturer: jspb.Message.getFieldWithDefault(msg, 3, ""),
    isActive: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    allowDiy: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    allowExisting: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.panel.Type}
 */
proto.panel.Type.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.panel.Type;
  return proto.panel.Type.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.panel.Type} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.panel.Type}
 */
proto.panel.Type.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPanelCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setManufacturer(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowDiy(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowExisting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.panel.Type.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.panel.Type.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.panel.Type} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.panel.Type.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPanelCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getManufacturer();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIsActive();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getAllowDiy();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getAllowExisting();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string panel_code = 1;
 * @return {string}
 */
proto.panel.Type.prototype.getPanelCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.panel.Type} returns this
 */
proto.panel.Type.prototype.setPanelCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string display_name = 2;
 * @return {string}
 */
proto.panel.Type.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.panel.Type} returns this
 */
proto.panel.Type.prototype.setDisplayName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string manufacturer = 3;
 * @return {string}
 */
proto.panel.Type.prototype.getManufacturer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.panel.Type} returns this
 */
proto.panel.Type.prototype.setManufacturer = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool is_active = 4;
 * @return {boolean}
 */
proto.panel.Type.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.panel.Type} returns this
 */
proto.panel.Type.prototype.setIsActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool allow_diy = 5;
 * @return {boolean}
 */
proto.panel.Type.prototype.getAllowDiy = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.panel.Type} returns this
 */
proto.panel.Type.prototype.setAllowDiy = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool allow_existing = 6;
 * @return {boolean}
 */
proto.panel.Type.prototype.getAllowExisting = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.panel.Type} returns this
 */
proto.panel.Type.prototype.setAllowExisting = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.panel.Configuration.prototype.toObject = function(opt_includeInstance) {
  return proto.panel.Configuration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.panel.Configuration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.panel.Configuration.toObject = function(includeInstance, msg) {
  var f, obj = {
    panelCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    panelConfigurationGuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    centralStationCode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    interactiveProviderCode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isActive: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.panel.Configuration}
 */
proto.panel.Configuration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.panel.Configuration;
  return proto.panel.Configuration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.panel.Configuration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.panel.Configuration}
 */
proto.panel.Configuration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPanelCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPanelConfigurationGuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCentralStationCode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInteractiveProviderCode(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.panel.Configuration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.panel.Configuration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.panel.Configuration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.panel.Configuration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPanelCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPanelConfigurationGuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCentralStationCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInteractiveProviderCode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIsActive();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string panel_code = 1;
 * @return {string}
 */
proto.panel.Configuration.prototype.getPanelCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.panel.Configuration} returns this
 */
proto.panel.Configuration.prototype.setPanelCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string panel_configuration_guid = 2;
 * @return {string}
 */
proto.panel.Configuration.prototype.getPanelConfigurationGuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.panel.Configuration} returns this
 */
proto.panel.Configuration.prototype.setPanelConfigurationGuid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string central_station_code = 3;
 * @return {string}
 */
proto.panel.Configuration.prototype.getCentralStationCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.panel.Configuration} returns this
 */
proto.panel.Configuration.prototype.setCentralStationCode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string interactive_provider_code = 4;
 * @return {string}
 */
proto.panel.Configuration.prototype.getInteractiveProviderCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.panel.Configuration} returns this
 */
proto.panel.Configuration.prototype.setInteractiveProviderCode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool is_active = 5;
 * @return {boolean}
 */
proto.panel.Configuration.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.panel.Configuration} returns this
 */
proto.panel.Configuration.prototype.setIsActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.panel.PanelEquipment.prototype.toObject = function(opt_includeInstance) {
  return proto.panel.PanelEquipment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.panel.PanelEquipment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.panel.PanelEquipment.toObject = function(includeInstance, msg) {
  var f, obj = {
    panelCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    equipmentGuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    panelConfigurationGuid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    displayName: jspb.Message.getFieldWithDefault(msg, 6, ""),
    groupCode: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.panel.PanelEquipment}
 */
proto.panel.PanelEquipment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.panel.PanelEquipment;
  return proto.panel.PanelEquipment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.panel.PanelEquipment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.panel.PanelEquipment}
 */
proto.panel.PanelEquipment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPanelCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEquipmentGuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPanelConfigurationGuid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.panel.PanelEquipment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.panel.PanelEquipment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.panel.PanelEquipment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.panel.PanelEquipment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPanelCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEquipmentGuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPanelConfigurationGuid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getGroupCode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string panel_code = 1;
 * @return {string}
 */
proto.panel.PanelEquipment.prototype.getPanelCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.panel.PanelEquipment} returns this
 */
proto.panel.PanelEquipment.prototype.setPanelCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string equipment_guid = 2;
 * @return {string}
 */
proto.panel.PanelEquipment.prototype.getEquipmentGuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.panel.PanelEquipment} returns this
 */
proto.panel.PanelEquipment.prototype.setEquipmentGuid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string panel_configuration_guid = 3;
 * @return {string}
 */
proto.panel.PanelEquipment.prototype.getPanelConfigurationGuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.panel.PanelEquipment} returns this
 */
proto.panel.PanelEquipment.prototype.setPanelConfigurationGuid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string display_name = 6;
 * @return {string}
 */
proto.panel.PanelEquipment.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.panel.PanelEquipment} returns this
 */
proto.panel.PanelEquipment.prototype.setDisplayName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string group_code = 7;
 * @return {string}
 */
proto.panel.PanelEquipment.prototype.getGroupCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.panel.PanelEquipment} returns this
 */
proto.panel.PanelEquipment.prototype.setGroupCode = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.panel.PanelEquipmentGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.panel.PanelEquipmentGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.panel.PanelEquipmentGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.panel.PanelEquipmentGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    displayName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isActive: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.panel.PanelEquipmentGroup}
 */
proto.panel.PanelEquipmentGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.panel.PanelEquipmentGroup;
  return proto.panel.PanelEquipmentGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.panel.PanelEquipmentGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.panel.PanelEquipmentGroup}
 */
proto.panel.PanelEquipmentGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.panel.PanelEquipmentGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.panel.PanelEquipmentGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.panel.PanelEquipmentGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.panel.PanelEquipmentGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsActive();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string group_code = 1;
 * @return {string}
 */
proto.panel.PanelEquipmentGroup.prototype.getGroupCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.panel.PanelEquipmentGroup} returns this
 */
proto.panel.PanelEquipmentGroup.prototype.setGroupCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string display_name = 2;
 * @return {string}
 */
proto.panel.PanelEquipmentGroup.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.panel.PanelEquipmentGroup} returns this
 */
proto.panel.PanelEquipmentGroup.prototype.setDisplayName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool is_active = 3;
 * @return {boolean}
 */
proto.panel.PanelEquipmentGroup.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.panel.PanelEquipmentGroup} returns this
 */
proto.panel.PanelEquipmentGroup.prototype.setIsActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.panel.TypeList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.panel.TypeList.prototype.toObject = function(opt_includeInstance) {
  return proto.panel.TypeList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.panel.TypeList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.panel.TypeList.toObject = function(includeInstance, msg) {
  var f, obj = {
    typesList: jspb.Message.toObjectList(msg.getTypesList(),
    proto.panel.Type.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.panel.TypeList}
 */
proto.panel.TypeList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.panel.TypeList;
  return proto.panel.TypeList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.panel.TypeList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.panel.TypeList}
 */
proto.panel.TypeList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.panel.Type;
      reader.readMessage(value,proto.panel.Type.deserializeBinaryFromReader);
      msg.addTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.panel.TypeList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.panel.TypeList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.panel.TypeList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.panel.TypeList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.panel.Type.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Type types = 1;
 * @return {!Array<!proto.panel.Type>}
 */
proto.panel.TypeList.prototype.getTypesList = function() {
  return /** @type{!Array<!proto.panel.Type>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.panel.Type, 1));
};


/**
 * @param {!Array<!proto.panel.Type>} value
 * @return {!proto.panel.TypeList} returns this
*/
proto.panel.TypeList.prototype.setTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.panel.Type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.panel.Type}
 */
proto.panel.TypeList.prototype.addTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.panel.Type, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.panel.TypeList} returns this
 */
proto.panel.TypeList.prototype.clearTypesList = function() {
  return this.setTypesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.panel.ConfigurationList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.panel.ConfigurationList.prototype.toObject = function(opt_includeInstance) {
  return proto.panel.ConfigurationList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.panel.ConfigurationList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.panel.ConfigurationList.toObject = function(includeInstance, msg) {
  var f, obj = {
    configurationsList: jspb.Message.toObjectList(msg.getConfigurationsList(),
    proto.panel.Configuration.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.panel.ConfigurationList}
 */
proto.panel.ConfigurationList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.panel.ConfigurationList;
  return proto.panel.ConfigurationList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.panel.ConfigurationList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.panel.ConfigurationList}
 */
proto.panel.ConfigurationList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.panel.Configuration;
      reader.readMessage(value,proto.panel.Configuration.deserializeBinaryFromReader);
      msg.addConfigurations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.panel.ConfigurationList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.panel.ConfigurationList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.panel.ConfigurationList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.panel.ConfigurationList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigurationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.panel.Configuration.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Configuration configurations = 1;
 * @return {!Array<!proto.panel.Configuration>}
 */
proto.panel.ConfigurationList.prototype.getConfigurationsList = function() {
  return /** @type{!Array<!proto.panel.Configuration>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.panel.Configuration, 1));
};


/**
 * @param {!Array<!proto.panel.Configuration>} value
 * @return {!proto.panel.ConfigurationList} returns this
*/
proto.panel.ConfigurationList.prototype.setConfigurationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.panel.Configuration=} opt_value
 * @param {number=} opt_index
 * @return {!proto.panel.Configuration}
 */
proto.panel.ConfigurationList.prototype.addConfigurations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.panel.Configuration, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.panel.ConfigurationList} returns this
 */
proto.panel.ConfigurationList.prototype.clearConfigurationsList = function() {
  return this.setConfigurationsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.panel.PanelEquipmentList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.panel.PanelEquipmentList.prototype.toObject = function(opt_includeInstance) {
  return proto.panel.PanelEquipmentList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.panel.PanelEquipmentList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.panel.PanelEquipmentList.toObject = function(includeInstance, msg) {
  var f, obj = {
    panelEquipmentsList: jspb.Message.toObjectList(msg.getPanelEquipmentsList(),
    proto.panel.PanelEquipment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.panel.PanelEquipmentList}
 */
proto.panel.PanelEquipmentList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.panel.PanelEquipmentList;
  return proto.panel.PanelEquipmentList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.panel.PanelEquipmentList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.panel.PanelEquipmentList}
 */
proto.panel.PanelEquipmentList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.panel.PanelEquipment;
      reader.readMessage(value,proto.panel.PanelEquipment.deserializeBinaryFromReader);
      msg.addPanelEquipments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.panel.PanelEquipmentList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.panel.PanelEquipmentList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.panel.PanelEquipmentList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.panel.PanelEquipmentList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPanelEquipmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.panel.PanelEquipment.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PanelEquipment panel_equipments = 1;
 * @return {!Array<!proto.panel.PanelEquipment>}
 */
proto.panel.PanelEquipmentList.prototype.getPanelEquipmentsList = function() {
  return /** @type{!Array<!proto.panel.PanelEquipment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.panel.PanelEquipment, 1));
};


/**
 * @param {!Array<!proto.panel.PanelEquipment>} value
 * @return {!proto.panel.PanelEquipmentList} returns this
*/
proto.panel.PanelEquipmentList.prototype.setPanelEquipmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.panel.PanelEquipment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.panel.PanelEquipment}
 */
proto.panel.PanelEquipmentList.prototype.addPanelEquipments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.panel.PanelEquipment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.panel.PanelEquipmentList} returns this
 */
proto.panel.PanelEquipmentList.prototype.clearPanelEquipmentsList = function() {
  return this.setPanelEquipmentsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.panel.PanelEquipmentGroupList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.panel.PanelEquipmentGroupList.prototype.toObject = function(opt_includeInstance) {
  return proto.panel.PanelEquipmentGroupList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.panel.PanelEquipmentGroupList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.panel.PanelEquipmentGroupList.toObject = function(includeInstance, msg) {
  var f, obj = {
    panelEquipmentGroupsList: jspb.Message.toObjectList(msg.getPanelEquipmentGroupsList(),
    proto.panel.PanelEquipmentGroup.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.panel.PanelEquipmentGroupList}
 */
proto.panel.PanelEquipmentGroupList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.panel.PanelEquipmentGroupList;
  return proto.panel.PanelEquipmentGroupList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.panel.PanelEquipmentGroupList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.panel.PanelEquipmentGroupList}
 */
proto.panel.PanelEquipmentGroupList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.panel.PanelEquipmentGroup;
      reader.readMessage(value,proto.panel.PanelEquipmentGroup.deserializeBinaryFromReader);
      msg.addPanelEquipmentGroups(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.panel.PanelEquipmentGroupList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.panel.PanelEquipmentGroupList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.panel.PanelEquipmentGroupList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.panel.PanelEquipmentGroupList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPanelEquipmentGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.panel.PanelEquipmentGroup.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PanelEquipmentGroup panel_equipment_groups = 1;
 * @return {!Array<!proto.panel.PanelEquipmentGroup>}
 */
proto.panel.PanelEquipmentGroupList.prototype.getPanelEquipmentGroupsList = function() {
  return /** @type{!Array<!proto.panel.PanelEquipmentGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.panel.PanelEquipmentGroup, 1));
};


/**
 * @param {!Array<!proto.panel.PanelEquipmentGroup>} value
 * @return {!proto.panel.PanelEquipmentGroupList} returns this
*/
proto.panel.PanelEquipmentGroupList.prototype.setPanelEquipmentGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.panel.PanelEquipmentGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.panel.PanelEquipmentGroup}
 */
proto.panel.PanelEquipmentGroupList.prototype.addPanelEquipmentGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.panel.PanelEquipmentGroup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.panel.PanelEquipmentGroupList} returns this
 */
proto.panel.PanelEquipmentGroupList.prototype.clearPanelEquipmentGroupsList = function() {
  return this.setPanelEquipmentGroupsList([]);
};


goog.object.extend(exports, proto.panel);
